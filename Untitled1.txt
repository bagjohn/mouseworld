
#%%writefile mouseworld/evolve_Value_Layer.py

import numpy as np
import matplotlib.pyplot as plt
from mouseworld.myspace import *
from joblib import Parallel, delayed
import multiprocessing
import time

a = time.time()
grid0 = Value_layer('example0',100,100)
grid1 = Value_layer('example1',100,100)
grid2 = Value_layer('example2',100,100)
grid3 = Value_layer('example3',100,100)

num_cores = multiprocessing.cpu_count()
def show(grid) :
    cell_values = np.zeros((grid.width, grid.height))
    for cell in grid.coord_iter():
        cell_value, x, y = cell
        cell_values[x][y] = cell_value
    plt.imshow(cell_values, interpolation='nearest')
    plt.colorbar()
    plt.show()

b = time.time()   
for i in range(10) :
    grid0.add_value((50,50),1)
    grid1.add_value((50,50),1)
    grid2.add_value((50,50),1)
    grid3.add_value((50,50),1)
#     Parallel(n_jobs=num_cores)(delayed(layer.diffuse)(0.95,0.8) for layer in [grid0,grid1,grid2,grid3])
    grid0.diffuse(0.95,0.8)
    grid1.diffuse(0.95,0.8)
    grid2.diffuse(0.95,0.8)
    grid3.diffuse(0.95,0.8)

c = time.time()

print(b-a)
print(c-b)

show(grid0)
show(grid1)
show(grid2)
show(grid3)

# print(grid.get_value((50,50)))
# print(grid.get_value((45,45)))
# print(grid.get_value((40,40)))
# print(grid.get_value((35,35)))
# print(grid.get_value((30,30)))
# print(grid.get_value((25,25)))
# print(grid.get_value((20,20)))


