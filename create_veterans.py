
# coding: utf-8

# In[ ]:

get_ipython().run_cell_magic('writefile', 'create_veterans_parallel.py', '\nimport math\nimport ipyparallel\nimport itertools\n\n# at terminal : ipcluster start -n 4\n\nclients = ipyparallel.Client()\ndview = clients.direct_view()\n\nwith dview.sync_imports():\n    from mouseworld import mouseworld\n    from mouseworld.mouseworld import Mouseworld\n    import time\ndview.push({"Mouseworld": Mouseworld})\n\ndef run_experiment() :\n#    \n    num_mice = [0, 0, 100]\n\n    # Build the model\n    print(\'Building mouseworld\')\n    model = mouseworld.Mouseworld(num_mice, 100, 0, mouse_initial_energy = 1000, mouse_max_energy = 1200,\n                     food_amount_range = (20,40), nutritional_value = [1], mouse_reproduction = False, brain_iterations_per_step = 10)\n\n    # Gather initial randomly distributed data\n    # model.initial_datacollector.collect(model,model.schedule)\n    # initial_model_data = model.initial_datacollector.get_model_vars_dataframe()\n    # initial_model_data.to_csv(\'results/initial_model_data.csv\', sep=\'\\t\')\n\n    # Prepare environment by stepping food and predators and diffusing odors\n    print(\'Preparing environment\')\n    for i in range(40) :\n        model.food_schedule.step()\n        model.predator_schedule.step()\n        model.diffuse_odor_layers(model.odor_layers)\n\n    counter = 0\n    myrange = 60\n    # Run for discrete number of timesteps\n#     print(\'Simulatimg for %i timesteps\'%myrange)\n#     for i in range(myrange) :\n#         c=time.time()\n#         counter += 1\n#         model.step()\n#         d=time.time()\n#         print(\'sim step : %i in %f\'%(counter, d-c))\n#     print(\'Simulation terminated - Number of time steps reached\')\n\n    # Run until all mice perish\n    print(\'Simulatimg until all mice perish\')\n    while model.num_mice > 0 :\n        c=time.time()\n        counter += 1\n        model.step()\n        d=time.time()\n        print(\'sim step : %i in %f\'%(counter, d-c))\n    print(\'Simulation terminated - No alive mice\')\n        \n    # Gather final model and agent data\n    model.final_datacollector.collect(model,model.all_mice_schedule)\n    # final_model_data = model.final_datacollector.get_model_vars_dataframe()\n    # print(final_model_data)\n\n    final_agent_data = model.final_datacollector.get_agent_vars_dataframe()\n    mouse_statistics = final_agent_data[[\'first_action_duration\', \'first_action_termination\']]\n    # mouse_statistics = final_agent_data[\'action_history\']\n    # mouse_statistics = final_agent_data[\'secondary_values\']\n    # mouse_statistics = final_agent_data[\'sensor_vector\']\n\n    mouse_statistics = mouse_statistics.reset_index(\'Step\', drop = True)\n        #mouse_statistics = mouse_statistics.reset_index(\'AgentID\', drop = True)\n    num_trials = len(mouse_statistics.index)\n    # for i in range(num_trials)\n    succesful_trials = mouse_statistics.loc[(mouse_statistics[\'first_action_termination\'] == \'Closure\')]\n    unsuccesful_trials = mouse_statistics.loc[(mouse_statistics[\'first_action_termination\'] == \'Failure\')]\n    # incomplete_trials = mouse_statistics.loc[(mouse_statistics[\'first_action_termination\'] == \'None\')]\n\n    num_succesful_trials = len(succesful_trials.index)\n    num_unsuccesful_trials = len(unsuccesful_trials.index)\n    # num_incomplete_trials = len(incomplete_trials.index)\n\n    #performance = num_succesful_trials / num_trials\n    mean_time_success = succesful_trials[\'first_action_duration\'].mean()\n    mean_time_failure = unsuccesful_trials[\'first_action_duration\'].mean()\n\n    sim_params = [mouse_position, num_mice, myrange]\n    results = [num_succesful_trials, mean_time_success, num_unsuccesful_trials, mean_time_failure]\n    exp_data = [results, sim_params]\n    return exp_data\n    # mouse_statistics = [performance,  mean_time]\n    #     sensor_vector = final_agent_data[\'sensor_vector\'][0].values[0]\n#     sensor_position = final_agent_data[\'sensor_position\'][0].values[0]\n#     motor_vector = final_agent_data[\'motor_vector\'][0].values[0]\n#     first_action = final_agent_data[\'action_history\'][0].values[0].loc[0]\n#     first_action = mousetest_data\n#     first_action = (mousetest_data[\'Duration\'], mousetest_data[\'Termination\'])\n    #first_action = final_agent_data[\'action_history\'][0].values[0].loc[0]\n#     return (performance,  mean_time)\n#     return (mouse_statistics)\n# print(performance,  mean_time)\nall_exp_data = dview.map_sync(run_experiment, mouse_positions)\n\nfile = open(\'results/check_approach_consistency_001_2.txt\',\'w\') \nfor exp_data in all_exp_data :\n    file.write(str(exp_data) + \'\\n\')\n# file.write(str(results) + \'\\n\')\nfile.close() \n# mouse_statistics.to_csv(\'results/mouse_statistics.csv\', sep=\'\\t\')')

